#!/usr/bin/env python3
import json
import pickle
from glob import glob
import numpy as np
import fish_3d as f3
from fish_gui import measure_point
import fish_corr as fc
import sys
import matplotlib.pyplot as plt


if len(sys.argv) not in [2, 3]:
    print("-" * 50)
    print("Invalid amount of arguments")
    print("Correct format: python get_tank.py [camera_folder] show")
    print("-" * 50)
    sys.exit(1)

centres = measure_point()
cameras = []
input_folder = sys.argv[1]

use_json = len(glob(f"{input_folder}/cam*.json")) > 0
use_pkl = len(glob(f"{input_folder}/cam*.pkl")) > 0

if use_json:
    camera_names = glob(f'{input_folder}/cam*.json')
    camera_names.sort()
    for cam_name in camera_names:
        with open(cam_name, 'rb') as f:
            cam = f3.Camera()
            cam.load_json(cam_name)
            cameras.append(cam)
elif use_pkl:
    for cam_name in [f'{input_folder}/cam_{i+1}.pkl' for i in range(3)]:
        with open(cam_name, 'rb') as f:
            cameras.append(pickle.load(f))
            cameras[-1].update()
else:
    exit("Can't find camera files in the input folder")

centres = np.array(centres)

# undistort these centres
centres_undistort = np.empty(centres.shape)
for i, cam in enumerate(cameras):
    centres_undistort[i] = cam.undistort(centres[i], want_uv=True)
centres_undistort = np.array(centres_undistort)

# calculate the 3D position of the centre
centre_3d, error = f3.ray_trace.ray_trace_refractive_faster(centres_undistort, cameras, z=0)
print(f"Maximum reprojection error is {error:.4f} pixels")

tank = fc.static.Tank(centre_3d)
with open('tank_model.pkl', 'wb') as f:
    pickle.dump(tank, f)

if len(sys.argv) > 2:
    from PIL import Image

    fig, ax = plt.subplots(2, 2)
    ax[0][0].scatter(*f3.ray_trace.reproject_refractive_no_distort(centre_3d, cameras[0]), marker='+', color='tomato')
    ax[0][0].scatter(*centres[0], color='tomato', facecolor='none')
    ax[0][0].imshow(Image.open('../images/cam-1.png'))

    ax[0][1].scatter(*f3.ray_trace.reproject_refractive_no_distort(centre_3d, cameras[1]), marker='+', color='tomato')
    ax[0][1].scatter(*centres[1], color='tomato', facecolor='none')
    ax[0][1].imshow(Image.open('../images/cam-2.png'))

    ax[1][0].scatter(*f3.ray_trace.reproject_refractive_no_distort(centre_3d, cameras[2]), marker='+', color='tomato')
    ax[1][0].scatter(*centres[2], color='tomato', facecolor='none')
    ax[1][0].imshow(Image.open('../images/cam-3.png'))

    ax[1][1].axis('off')

    for a in ax.ravel():
        a.set_xticks([])
        a.set_yticks([])
    fig.set_size_inches(12, 9)
    fig.tight_layout()
    plt.savefig('tank_base.png')
    plt.close()
